//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/General/Input/InputControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControlls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControlls"",
    ""maps"": [
        {
            ""name"": ""Mouse"",
            ""id"": ""98033b67-a436-4546-a1a1-43b2d492f1c0"",
            ""actions"": [
                {
                    ""name"": ""PrimaryBtnPress"",
                    ""type"": ""Button"",
                    ""id"": ""c4a56634-f03f-432d-9e05-10c6bb132e87"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryBtnTap"",
                    ""type"": ""Button"",
                    ""id"": ""1e2f2adb-1996-4433-bb4c-f9c6cc5b882f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""0f0ecab3-ac06-45bd-a7af-1e18ed1de3b6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseScroll"",
                    ""type"": ""PassThrough"",
                    ""id"": ""858e0e00-240d-4c2f-b946-63bb13bd003b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a5a4fac2-5c9d-49fb-b279-ef5e688dfb63"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""PrimaryBtnPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b91277a6-e959-4b83-9acf-e84534d99b07"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d425562-2c1b-4197-a444-4e5fd8a350c9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""PrimaryBtnTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa706961-0d95-4296-b01b-b94f890fdfdc"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""MouseScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""id"": ""8fdee38d-f9b6-4af8-9980-77172bc03082"",
            ""actions"": [
                {
                    ""name"": ""FastForwardKeyTap"",
                    ""type"": ""Button"",
                    ""id"": ""4fba7eae-86d2-4d1f-9080-ed4b807e3ab8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AutoFocusKeyTap"",
                    ""type"": ""Button"",
                    ""id"": ""77314067-d966-4d9a-83ff-92a53e3acc71"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""51a6a54f-ae95-48a0-9106-60ea767ef01d"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""FastForwardKeyTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6bc91510-d006-48ee-ac26-1d0e598e865b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AutoFocusKeyTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": []
        }
    ]
}");
        // Mouse
        m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
        m_Mouse_PrimaryBtnPress = m_Mouse.FindAction("PrimaryBtnPress", throwIfNotFound: true);
        m_Mouse_PrimaryBtnTap = m_Mouse.FindAction("PrimaryBtnTap", throwIfNotFound: true);
        m_Mouse_MousePosition = m_Mouse.FindAction("MousePosition", throwIfNotFound: true);
        m_Mouse_MouseScroll = m_Mouse.FindAction("MouseScroll", throwIfNotFound: true);
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_FastForwardKeyTap = m_Keyboard.FindAction("FastForwardKeyTap", throwIfNotFound: true);
        m_Keyboard_AutoFocusKeyTap = m_Keyboard.FindAction("AutoFocusKeyTap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mouse
    private readonly InputActionMap m_Mouse;
    private List<IMouseActions> m_MouseActionsCallbackInterfaces = new List<IMouseActions>();
    private readonly InputAction m_Mouse_PrimaryBtnPress;
    private readonly InputAction m_Mouse_PrimaryBtnTap;
    private readonly InputAction m_Mouse_MousePosition;
    private readonly InputAction m_Mouse_MouseScroll;
    public struct MouseActions
    {
        private @InputControlls m_Wrapper;
        public MouseActions(@InputControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryBtnPress => m_Wrapper.m_Mouse_PrimaryBtnPress;
        public InputAction @PrimaryBtnTap => m_Wrapper.m_Mouse_PrimaryBtnTap;
        public InputAction @MousePosition => m_Wrapper.m_Mouse_MousePosition;
        public InputAction @MouseScroll => m_Wrapper.m_Mouse_MouseScroll;
        public InputActionMap Get() { return m_Wrapper.m_Mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void AddCallbacks(IMouseActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseActionsCallbackInterfaces.Add(instance);
            @PrimaryBtnPress.started += instance.OnPrimaryBtnPress;
            @PrimaryBtnPress.performed += instance.OnPrimaryBtnPress;
            @PrimaryBtnPress.canceled += instance.OnPrimaryBtnPress;
            @PrimaryBtnTap.started += instance.OnPrimaryBtnTap;
            @PrimaryBtnTap.performed += instance.OnPrimaryBtnTap;
            @PrimaryBtnTap.canceled += instance.OnPrimaryBtnTap;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @MouseScroll.started += instance.OnMouseScroll;
            @MouseScroll.performed += instance.OnMouseScroll;
            @MouseScroll.canceled += instance.OnMouseScroll;
        }

        private void UnregisterCallbacks(IMouseActions instance)
        {
            @PrimaryBtnPress.started -= instance.OnPrimaryBtnPress;
            @PrimaryBtnPress.performed -= instance.OnPrimaryBtnPress;
            @PrimaryBtnPress.canceled -= instance.OnPrimaryBtnPress;
            @PrimaryBtnTap.started -= instance.OnPrimaryBtnTap;
            @PrimaryBtnTap.performed -= instance.OnPrimaryBtnTap;
            @PrimaryBtnTap.canceled -= instance.OnPrimaryBtnTap;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @MouseScroll.started -= instance.OnMouseScroll;
            @MouseScroll.performed -= instance.OnMouseScroll;
            @MouseScroll.canceled -= instance.OnMouseScroll;
        }

        public void RemoveCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseActions @Mouse => new MouseActions(this);

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private List<IKeyboardActions> m_KeyboardActionsCallbackInterfaces = new List<IKeyboardActions>();
    private readonly InputAction m_Keyboard_FastForwardKeyTap;
    private readonly InputAction m_Keyboard_AutoFocusKeyTap;
    public struct KeyboardActions
    {
        private @InputControlls m_Wrapper;
        public KeyboardActions(@InputControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @FastForwardKeyTap => m_Wrapper.m_Keyboard_FastForwardKeyTap;
        public InputAction @AutoFocusKeyTap => m_Wrapper.m_Keyboard_AutoFocusKeyTap;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void AddCallbacks(IKeyboardActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyboardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Add(instance);
            @FastForwardKeyTap.started += instance.OnFastForwardKeyTap;
            @FastForwardKeyTap.performed += instance.OnFastForwardKeyTap;
            @FastForwardKeyTap.canceled += instance.OnFastForwardKeyTap;
            @AutoFocusKeyTap.started += instance.OnAutoFocusKeyTap;
            @AutoFocusKeyTap.performed += instance.OnAutoFocusKeyTap;
            @AutoFocusKeyTap.canceled += instance.OnAutoFocusKeyTap;
        }

        private void UnregisterCallbacks(IKeyboardActions instance)
        {
            @FastForwardKeyTap.started -= instance.OnFastForwardKeyTap;
            @FastForwardKeyTap.performed -= instance.OnFastForwardKeyTap;
            @FastForwardKeyTap.canceled -= instance.OnFastForwardKeyTap;
            @AutoFocusKeyTap.started -= instance.OnAutoFocusKeyTap;
            @AutoFocusKeyTap.performed -= instance.OnAutoFocusKeyTap;
            @AutoFocusKeyTap.canceled -= instance.OnAutoFocusKeyTap;
        }

        public void RemoveCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyboardActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyboardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IMouseActions
    {
        void OnPrimaryBtnPress(InputAction.CallbackContext context);
        void OnPrimaryBtnTap(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnMouseScroll(InputAction.CallbackContext context);
    }
    public interface IKeyboardActions
    {
        void OnFastForwardKeyTap(InputAction.CallbackContext context);
        void OnAutoFocusKeyTap(InputAction.CallbackContext context);
    }
}
